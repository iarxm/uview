#!/usr/bin/env bash

# ######################################################
# AUTHOR: IAROM MADDEN
#
# File preview via tabbed xembed with persistent preview file state
# files are sent to previewer via interface/server method
# dep: tabbed mpv neovim zathura prg_nuk bash
# tabbed configured w relative tabs and new pos = 1
#
# ####################################################

fif_x="${1}"
fil_cur="${2}"


# atoms ########################################

_prn()         { printf "%s \n" "${@}"; }

_prn_deb()     { printf "%s\n" "${1}" >&2; }

_set_mim_cur() { mim_cur=$(file -bL --mime-type "${fil_cur}"); }

_win_foc_tab() { 
    xdotool key --window "${xid_tbd}" "Ctrl+${1}"
    xdotool windowactivate "${xid_fmx}"; }

_win_beh_fmx() { 
    timeout "2" \
        xdotool behave "${xid_tbd}" focus windowactivate "$xid_fmx"; }


# mpv #####################################

_mpv_ini() { 
    ${mpv} --input-ipc-server="${soc_mpv}" --wid="${xid_tbd}" \
        --focus-on=never --force-window=immediate --idle "${fil_cur}" & }

_mpv_add() { 
    printf '%s\n' \
        "{ \"command\": [\"loadfile\", \"${fil_cur}\", \"replace\" ] }" \
        | socat - "${soc_mpv}" &> /dev/null; }

_mpv()     { _mpv_add ;}


# nvim #######################################

_nvi_ini() { 
    st -c preview-nvim -w "${xid_tbd}" -e \
        nvim --listen "${soc_nvi}" -c \
            'set shortmess+=I | hi CursorLine guibg=black guifg=black' & }

_nvi_snd() { 
    case ${mim_cur} in
        text/*)           ncmd=":view ${fil_cur}<CR>" ;;
        inode/directory)  ncmd=":view ${fil_cur}/<CR>" ;; 
    esac
    nvim --server "${soc_nvi}" --remote-send "${ncmd}" & }

_nvi() {
  pid_nvi="$(pgrep -f "nvim --listen ${soc_nvi}")"
  { [ -n "${pid_nvi}" ] && _nvi_snd; } \
    || { _nvi_ini; _nvi_snd; }; }


# zat #########################################

_zat_snd() { # open file
    dbus-send --session --dest="${soc_zat}" --type=method_call \
        --print-reply \
            /org/pwmt/zathura org.pwmt.zathura.OpenDocument \
            string:"${fil_cur}" \
            string:'' \
            int32:1 &2>> /dev/null & }
    
_zat_x() { zathura -e "${xid_tbd}" "$1" & pid_zat=$!; }

_zat_ini() { 
    _win_beh_fmx &
    [ ${mim_cur} = "application/pdf" ] || _zat_x "${fil_zat_ini}"
    _zat_x "${fil_cur}"
    soc_zat="org.pwmt.zathura.PID-${pid_zat}";}
    #{ sleep 0.3; _foc_viewer; } & }

_zat() { { [ -e "/proc/${pid_zat}" ] && _zat_snd && return; }; _zat_ini ;}


# tabbed ########################################

_prg_tbd_ini () { # start tabbed

    xid_fmx="$(xdotool getactivewindow)"
    mkfifo "${fif_y:="$(mktemp -u)"}"
    tabbed -n preview > "${fif_y}" &
    
    jobs
    pid_tbd="$(jobs -p %%)"
    [ -z "${pid_tbd}" ] && exit 1
    
    soc_xxx="$(echo ${fif_x} | grep -o '[0-9]\+')"
    soc_mpv="/tmp/uview${soc_xxx}.tbd-${pid_tbd}.mpv"
    soc_nvi="/tmp/uview${soc_xxx}.tbd-${pid_tbd}.nvi"
    
    read -r xid_tbd < "${fif_y}" && rm "${fif_y}"
    
    _win_beh_fmx &
    _mpv_ini
    
    while [ "${c}" -le "20" ] ; do 
        sleep 0.1; c=$((c+1))
        [ -n $(xwininfo -id ${xid_tbd} -children | grep "mpv") ] && {
            sleep 0.2; break; }
    done

    _nvi_ini &
    _zat_ini; }


# ini_x ######################################

_ini() {

    declare -g mim_cur
    declare -g xid_tbd
    declare -g pid_tbd
    declare -g soc_mpv
    declare -g soc_nvi
    declare -g soc_zat
      
    declare -gi c="1"
    declare -gi tab_mpv="1"
    declare -gi tab_nvi="2"
    declare -gi tab_zat="3"
    declare -g  mim_las="application/pdf" # last preview prg to load
      
    declare -g  cfg_hmx="${XDG_CONFIG_HOME:-"${HOME}/.config"}"
      
    : ${cfg_dir:="${cfg_hmx}/uview"} && [ -d "${cfg_dir}" ] \
        || mkdir "${cfg_dir}"
      
    source "${cfg_dir}/config" 2>/dev/null
    
    : ${tim_lim:="0.1"}
    : ${tim_lim_y:="200"}
    : ${fil_cur:="${nnn}"}
    : ${fif_x:="${NNN_FIFO}"}
      
    [ ! -r "${fif_x}" ] && { echo "fif read fail (${fif_x})" 1>&2 ; exit 1; }
      
    #mkfifo "${fif_zer:=$(mktemp -u)}"
      
    _set_mim_cur
    declare -g fil_zat_ini="${HOME}/.cache/blank.pdf"
    #[ -e "${fil_zat_ini}" ] || { 
          #echo "# READER" | pandoc -f markdown -o "${fil_zat_ini}"; }
    
    # TODO: make if clauses to set nuke (similar to prg_trm
    #declare -g prg_nk1="nuke" 
    declare -g prg_nk2="${cfg_hmx}/nnn/plugins/nuke"
    
    : ${prg_nuk:="${prg_nk1:-"${prg_nk2}"}"}
    : ${prg_pgr:="nvim -R"}
    : ${prg_trm:="st -c preview -w"}
    : ${mpv:="${MPVX:="mpv"}"}
     
    if which ${prg_trm} >/dev/null 2>&1 ; then :
    elif which st       >/dev/null 2>&1 ; then prg_trm="st -c preview -w"
    elif which urxvt    >/dev/null 2>&1 ; then prg_trm="urxvt -embed"
    elif which xterm    >/dev/null 2>&1 ; then prg_trm="xterm -into"
    else _prn "no xembed term found" >&2 ; fi
  
    if which mpv     >/dev/null 2>&1 ; then
        media() { _mpv; } else
        media() { _trm_nuk; } fi
    if which zathura >/dev/null 2>&1 ; then
        doc()   { _zat; }; else
        doc()   { _trm_nuk; }; fi
    if which nvim    >/dev/null 2>&1 ; then
        txtp()  { _nvi; }
        inodev(){ _nvi; }; else
        txtp()  { _trm_nuk; }; fi 

    exec >uview.log 2>&1 # debug mode
    #exec >/dev/null 2>&1  # mute from now

    trap _kil SIGINT ;}


# mime handling #############################

_foc_viewer() {
    [ ${mim_cur} = ${mim_las} ] || \
        case ${mim_cur} in
            video/*|image/*|audio/*) _win_foc_tab ${tab_mpv} ;;
            text/*|inode/*)          _win_foc_tab ${tab_nvi} ;;
            application/pdf)         _win_foc_tab ${tab_zat} ;; 
        esac ;}

_mim_switch() { # mime switches
    [ n = ${tim_swi} ] || \
        case "${mim_cur}" in
            video/*)                  media ;;
            application/octet-stream) media ;;
            audio/*)                  media ;;
            image/*)                  media ;;
            application/pdf)          doc ;;
            inode/directory)          inodev ;;
            text/*)                   txtp ;;
        esac ;} #*) all ;; 

_kil() { 
    kill "${pid_tbd}"
    rm -f "${soc_mpv}" "${soc_nvi}"
    exec 3>&-
    disown
    exit 0; }
#exec {tim_swi_y[1]}>&- 
#exec 3>&-


# main ###########################################

_main() { # init new file arg

    _ini
    _prg_tbd_ini
  
    tim_pre=$(date +%s%3N)

    coproc loops {
        _prn_deb "coproc init"

        while read -r fil_cur ; do
            _prn_deb "coproc init: loop" 
            #timeout 0.01 cat < "${fif_x}" tail -n 1 | >&3
      
            jobs; jobs | grep tabbed || break
            [ ! -e "${fil_cur}" ] && continue
      
            #{
                #tim_cur=$(date +%s%3N)
                #{ [ $((tim_cur - tim_pre)) -lt ${tim_lim_y} ] && \
                    #tim_swi="n" || \
                    #tim_swi="y"; }
                #tim_pre=${tim_cur}
            #}
 
            _set_mim_cur
            _foc_viewer
            _mim_switch
        
            mim_las="${mim_cur}"
        done
        
        _prn_deb "coproc finish"
    }
 
    _prn_deb "init fifo filter"

    while read -r fil_one ; do
        
        _prn_deb "init fif_x loop"
        _prn_deb "fil_one: $fil_one"

        _prn ${fil_one} &>"${loops[1]}"
        #{ 
            #_prn ${fil_one}; timeout 0.01 cat < "${fif_x}" | tail -n 1
        #} &>"${loops[1]}"

        sleep 0.2

    done < "${fif_x}"

    _kil;}


_main &

# arc ###############################################################
#_trm_nuk ()    { ${prg_trm} "${xid_tbd}" -e "${prg_nuk}" "${fil_cur}" & } 
#TODO: custom set each particular ${prg_trm}, 
    #as xid will be specificed differently depending on the term specs

#_set_xid_fmx() { xid_fmx="$(xdotool getactivewindow)" ; }
#_win_foc_fmx() { xdotool windowactivate "${xid_fmx}"; }

#: ${cac_dir:="${HOME}/.cache/uview"} && {
    #[ -d "${cac_dir}" ] || mkdir "${cfg_dir}; }

