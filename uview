#!/usr/bin/env bash

# ######################################################
# AUTHOR: IAROM MADDEN
#
# file preview via tabbed xembed with persistent preview file state
# files are sent to previewer via interface/server method
# dep: tabbed mpv neovim zathura prg_nuk
# tabbed configured w relative tabs and new pos = 1
#
# ########################################################

# [x] TODO: initialise prgs 
# [x] TODO: refactor whole prg
# [x] TODO: wm focus control
# [ ] TODO: 4th tab w. prg_nuk
# [ ] TODO: mpv fixes
# [ ] TODO: mpv pause on switch exception
# [ ] TODO: switch to python
# [ ] TODO: zathura dbus filename issues
# [ ] TODO: mpv filename issues

###########################################################

# init config [TODO:set in a config file]

cache_dir="$HOME/.cache/uview"
prg_nuk="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/plugins/prg_nuk"
prg_trm="st -c preview -w"
prg_pgr=${prg_pgr:-"nvim -R"}
tab_mpv="1"
tab_nvi="2"
tab_zat="3"
tim_lim="0.1"
fil_zat_ini="$HOME/.local/share/abg/zathura.pdf"

# init universals

fif_x="$1"

_ini() {
  # var
  log_x="$cache_dir/uviewx.log"
  cac_tim_swi="$cache_dir/cache.tim_swi"
  cac_fil_cur="$cache_dir/cache.fil_cur"
  fil_one="$nnn"
  fil_cur="$fil_one"
  mim_las="application/pdf" # first visible win is zath
  mim_cur=""
  xid_tbd=""
  pid_tbd=""
  soc_mpv=""
  soc_nvi=""
  soc_zat=""
  fif_y="";}
  

# atoms ########################################

_prn()             { printf "%s \n" "$@"; }
_set_mim_cur()     { mim_cur=$(file -bL --mime-type "${fil_cur}"); }
_set_xid_nnn()     { xid_nnn="$(xdotool getactivewindow)" ; }
_win_foc_nnn()     { xdotool windowactivate "$xid_nnn"; }
_win_foc_nnx()     { sleep 0.1; _win_foc_nnn; }
_win_beh_nnn()     { timeout "2" xdotool behave "$xid_tbd" focus windowactivate "$xid_nnn"; }
_win_foc_tab()     { xdotool key --window "$xid_tbd" "Ctrl+$1";  _win_foc_nnn; }
_set_cac_fil_cur() { _prn "$fil_cur" > "$cac_fil_cur"; }
_debugx()          { _prn "$1" >> "$log_x" ; }


_trm_nuk ()  { $prg_trm "$xid_tbd" -e "$prg_nuk" "$fil_cur" & }


# mpv #####################################

_mpv_ini() { $mpv --input-ipc-server="${soc_mpv}" --wid="$xid_tbd" --focus-on=never --force-window=immediate --idle "${fil_cur}" & }

_mpv_add() { printf '%s\n' "{ \"command\": [\"loadfile\", \"$fil_cur\", \"replace\" ] }" | socat - "${soc_mpv}" &> /dev/null; }

_mpv() { _mpv_add ;}


# nvim #######################################

_nvi_ini() { st -c preview-nvim -w "$xid_tbd" -e nvim --listen "${soc_nvi}" -c 'set shortmess+=I | hi CursorLine guibg=black guifg=black' & }

_nvi_snd() { 
  case $mim_cur in
    text/*)           ncmd=":view ${fil_cur}<CR>" ;;
    inode/directory)  ncmd=":view ${fil_cur}/<CR>" ;;
  esac
  nvim --server "${soc_nvi}" --remote-send "$ncmd" & }

_nvi() {
  pid_nvi="$(pgrep -f "nvim --listen ${soc_nvi}")"
  { [ -n "${pid_nvi}" ] && _nvi_snd; } \
    || { _nvi_ini; _nvi_snd; }; }


# zat #########################################

_zat_snd() { # open file
  dbus-send \
    --session  \
    --dest="$soc_zat"  \
    --type=method_call \
    --print-reply      \
    /org/pwmt/zathura  \
    org.pwmt.zathura.OpenDocument \
    string:"${fil_cur}" \
    string:'' \
    int32:1 &2>> /dev/null & }
    
_zat_x()   { zathura -e "$xid_tbd" "$1" & pid_zat=$!; }

_zat_ini() { 
  _win_beh_nnn &
  [ $mim_cur = "application/pdf" ] && _zat_x "$fil_cur" || _zat_x "$fil_zat_ini"
  soc_zat="org.pwmt.zathura.PID-${pid_zat}"
  { sleep 0.3; _foc_viewer; } & }

_zat() { { [ -e "/proc/$pid_zat" ] && _zat_snd && return; }; _zat_ini ;}


# tabbed ########################################

_prg_tbd_ini () { # start tabbed
  _set_xid_nnn
  fif_y="$(mktemp -u)"
  mkfifo "${fif_y}"
  tabbed -n preview > "${fif_y}" &

  jobs
  pid_tbd="$(jobs -p %%)"
  fif_nnn="$(echo ${fif_x} | grep -o '[0-9]\+')"
  soc_mpv="/tmp/nnn.${fif_nnn}.tbd-${pid_tbd}.mpv"
  soc_nvi="/tmp/nnn.${fif_nnn}.tbd-${pid_tbd}.nvi"

  [ -z "${pid_tbd}" ] && { echo "Can't start tabbed"; exit 1; }
  read -r xid_tbd < "${fif_y}" && rm "${fif_y}"

  _win_beh_nnn &
  _mpv_ini & c=1; while [ "${c}" -le "20" ] ; do sleep 0.1; c=$((c+1)); [ -n $(xwininfo -id $xid_tbd -children | grep "mpv") ] && sleep 0.2 && break; done
  _nvi_ini &
  _zat_ini; }


# ini_x ######################################

_ini_x() {
  [ -n "${MPVX}" ] && mpv="${MPVX}" || mpv="mpv"
  { [ -n "${fif_x}" ] && [ -f "${NNN_FIFO}" ]; } && fif_x="${NNN_FIFO}"
  [ ! -r "${fif_x}" ] && { echo "fif_x read fail (${fif_x})"; exit 1; }
  mkdir -p "${cache_dir}"
  printf "y" > "${cac_tim_swi}"
  
  fif_z="$(mktemp -u)" && mkfifo "${fif_z}"
  fif_zx="$(mktemp -u)" && mkfifo "${fif_zx}"

  
  if which $prg_trm >/dev/null 2>&1 ; then prg_trm=$prg_trm
  elif which st     >/dev/null 2>&1 ; then prg_trm="st -c preview -w"
  elif which urxvt  >/dev/null 2>&1 ; then prg_trm="urxvt -embed"
  elif which xterm  >/dev/null 2>&1 ; then prg_trm="xterm -into"
  else _prn "no xembed term found" >&2 
  fi
  
  if which mpv >/dev/null 2>&1 ; then
    media() { _mpv; } else
    media() { _trm_nuk; } fi
  if which zathura >/dev/null 2>&1 ; then
    doc()   { _zat; }; else
    doc()   { _trm_nuk; }; fi
  if which nvim >/dev/null 2>&1 ; then
    txtp()  { _nvi; }
    inodev(){ _nvi; }; else
    txtp()  { _trm_nuk; }; fi ;}


# mime handling #############################

_mim_switch() { # mime switches
  [ n = $(cat "${cac_tim_swi}") ] && return
  case "${mim_cur}" in
    video/*)                  media ;;
    application/octet-stream) media ;;
    audio/*)                  media ;;
    image/*)                  media ;;
    application/pdf)          doc ;;
    inode/directory)          inodev ;;
    text/*)                   txtp ;;
    #*) all ;;
  esac ;}

_foc_viewer() {
  [ ${mim_cur} = ${mim_las} ] && return
  case ${mim_cur} in
    video/*|image/*|audio/*) _win_foc_tab ${tab_mpv} ;;
    text/*|inode/*)          _win_foc_tab ${tab_nvi} ;;
    application/pdf)         _win_foc_tab ${tab_zat} ;;
  esac ;}

_tim_swi() { _prn "${1}" > "${cac_tim_swi}"; }

_tim() {
  sleep "0.1"
  fil_nxt=$(timeout 0.05 cat "${fif_z}")
  if [ ${fil_cur} != ${fil_nxt} ]; then
    _tim_swi "n"
    # todo: fix this again
    # todo:
    # 2 fifo's??
    #sleep 0.6; fil_lst=$(timeout 0.05 cat "${fif_zx}")
    #[ ${fil_nxt} = ${fil_lst} ] && _tim_swi "y"
    return
  fi
  _tim_swi "y"; }

_kil() { kill "${pid_tbd}"; rm -f "${soc_mpv}" "${soc_nvi}" "${fif_z}" "${fif_zx}"; disown; exit 0; }


# main ###########################################

_main() { # init new file arg
  _ini
  _ini_x

  exec >/dev/null 2>&1  # mute from now
  trap _kil SIGINT
  
  _set_cac_fil_cur
  _set_mim_cur

  _prg_tbd_ini
    
  while read -r fil_cur; do
    jobs; jobs | grep tabbed || break
    [ ! -e "${fil_cur}" ] && continue
    
    _prn "${fil_cur}" > "${fif_z}" &
    _prn "${fil_cur}" > "${fif_zx}" &
    _tim &

    _set_cac_fil_cur
    _set_mim_cur
  
    _foc_viewer
    _mim_switch
  
    mim_las="${mim_cur}"

  done < "${fif_x}"
  
  _kil;}

_main &

