#!/usr/bin/env bash

# IAROM MADDEN mail@iarom.org
#
# File preview via tabbed xembed with persistent preview file state
# files are sent to previewer via interface/server method
# dep: tabbed mpv neovim zathura prg_nuk bash
# tabbed configured w relative tabs and new pos = 1

fif_x="${1}"
fil_cur="${2}"


_prn()         { printf "%s \n" "${@}"; }
_prn_deb()     { printf "%s\n" "${1}" >&2; }
_mim_set()     { mim_cur=$(file -bL --mime-type "${fil_cur}"); }


_tab_chg() {

    xdotool key --window "${xid_tbd}" "Ctrl+${1}"
    xdotool windowactivate "${xid_fmx}"
}

_win_beh_fmx() {

    timeout "2" \
        xdotool behave "${xid_tbd}" focus windowactivate "$xid_fmx"
}


# mpv

_mpv_ini() {

    ${mpv} --input-ipc-server="${soc_mpv}" --wid="${xid_tbd}" \
        --focus-on=never --force-window=immediate --idle "${fil_cur}" &
}

_mpv_add() {

    printf '%s\n' \
        "{ \"command\": [\"loadfile\", \"${fil_cur}\", \"replace\" ] }" \
        | socat - "${soc_mpv}" &> /dev/null
}

_mpv()     { _mpv_add ;}



# nvim

_nvi_ini() {

    st -c preview-nvim -w "${xid_tbd}" -e \
        nvim --listen "${soc_nvi}" -c \
            'set shortmess+=I | hi CursorLine guibg=black guifg=black' &
}

_nvi_snd() {

    case ${mim_cur} in
        text/*)           ncmd=":view ${fil_cur}<CR>" ;;
        inode/directory)  ncmd=":view ${fil_cur}/<CR>" ;; 
    esac
    nvim --server "${soc_nvi}" --remote-send "${ncmd}" &
}

_nvi() {

  pid_nvi="$(pgrep -f "nvim --listen ${soc_nvi}")"
  { [ -n "${pid_nvi}" ] && _nvi_snd; } \
    || { _nvi_ini; _nvi_snd; }
}



# zat

_zat_snd() {

    dbus-send --session --dest="${soc_zat}" --type=method_call \
        --print-reply \
            /org/pwmt/zathura org.pwmt.zathura.OpenDocument \
            string:"${fil_cur}" \
            string:'' \
            int32:1 &2>> /dev/null &
}

_zat_x() { zathura -e "${xid_tbd}" "$1" & pid_zat=$!; }


_zat_ini() {

    _win_beh_fmx &
    [ ${mim_cur} = "application/pdf" ] || _zat_x "${fil_zat_ini}"
    _zat_x "${fil_cur}"
    soc_zat="org.pwmt.zathura.PID-${pid_zat}"
}

_zat() {

    [ -e "/proc/${pid_zat}" ] && _zat_snd && return
    _zat_ini
}


# tabbed

_prg_tbd_ini () {

    xid_fmx="$(xdotool getactivewindow)"
    mkfifo "${fif_y:="$(mktemp -u)"}"
    tabbed -n preview > "${fif_y}" &
    
    jobs
    pid_tbd="$(jobs -p %%)"
    [ -z "${pid_tbd}" ] && exit 1
    
    soc_xxx="$(echo ${fif_x} | grep -o '[0-9]\+')"
    soc_mpv="/tmp/uview${soc_xxx}.tbd-${pid_tbd}.mpv.soc"
    soc_nvi="/tmp/uview${soc_xxx}.tbd-${pid_tbd}.nvi.soc"
    
    read -r xid_tbd < "${fif_y}" && rm "${fif_y}"
    
    _win_beh_fmx &
    _mpv_ini
    
    while [ "${c}" -le "20" ] ; do 
        sleep 0.1; c=$((c+1))
        [ -n $(xwininfo -id ${xid_tbd} -children | grep "mpv") ] && {
            sleep 0.2; break; }
    done

    _nvi_ini &
    _zat_ini
}


_ini() {

    declare -g mim_cur
    declare -g xid_tbd
    declare -g pid_tbd
    declare -g soc_mpv
    declare -g soc_nvi
    declare -g soc_zat
    
    declare -g tim_swi="y"
      
    declare -gi c="1"
    declare -gi tab_mpv="1"
    declare -gi tab_nvi="2"
    declare -gi tab_zat="3"
    declare -g  mim_las="application/pdf" # last preview prg to load
      
    declare -g  cfg_hmx="${XDG_CONFIG_HOME:-"${HOME}/.config"}"
      
    : ${cfg_dir:="${cfg_hmx}/uview"} && \
        [ -d "${cfg_dir}" ] || mkdir "${cfg_dir}"
      
    source "${cfg_dir}/config" 2>/dev/null
    
    : ${tim_lim:="0.1"}
    : ${tim_lim_y:="200"}
    : ${fil_cur:="${nnn}"}
    : ${fif_x:="${NNN_FIFO}"}
      
    [ ! -r "${fif_x}" ] && { echo "fif read fail (${fif_x})" 1>&2 ; exit 1; }
      
    #mkfifo "${fif_zer:=$(mktemp -u)}"
      
    _mim_set
    
    declare -g fil_zat_ini="${HOME}/.cache/blank.pdf"
    
    declare -g prg_nk2="${cfg_hmx}/nnn/plugins/nuke"
    
    : ${prg_nuk:="${prg_nk1:-"${prg_nk2}"}"}
    : ${prg_pgr:="nvim -R"}
    : ${prg_trm:="st -c preview -w"}
    : ${mpv:="${MPVX:="mpv"}"}
     
    if which ${prg_trm} >/dev/null 2>&1 ; then :
    elif which st       >/dev/null 2>&1 ; then prg_trm="st -c preview -w"
    elif which urxvt    >/dev/null 2>&1 ; then prg_trm="urxvt -embed"
    elif which xterm    >/dev/null 2>&1 ; then prg_trm="xterm -into"
    else _prn "no xembed term found" >&2 ; fi
  
    if which mpv     >/dev/null 2>&1 ; then
        media() { _mpv; } else
        media() { _trm_nuk; } fi
    if which zathura >/dev/null 2>&1 ; then
        doc()   { _zat; }; else
        doc()   { _trm_nuk; }; fi
    if which nvim    >/dev/null 2>&1 ; then
        txtp()  { _nvi; }
        inodev(){ _nvi; }; else
        txtp()  { _trm_nuk; }; fi 

    exec >/dev/null 2>&1  # mute from now
    #exec >uview.log 2>&1 # debug mode

    trap _kil SIGINT
}


# mime handling

_tab_swi() {

    [ ${mim_cur} = ${mim_las} ] || \
        case ${mim_cur} in
            video/*|image/*|audio/*) _tab_chg ${tab_mpv} ;;
            text/*|inode/*)          _tab_chg ${tab_nvi} ;;
            application/pdf)         _tab_chg ${tab_zat} ;; 
        esac
}


_mim_swi() { # switches

    [ n = ${tim_swi} ] || \
        case "${mim_cur}" in
            video/*)                  media ;;
            application/octet-stream) media ;;
            audio/*)                  media ;;
            image/*)                  media ;;
            application/pdf)          doc ;;
            inode/directory)          inodev ;;
            text/*)                   txtp ;;
        esac
} #*) all ;; 

_kil() { 

    kill "${pid_tbd}"
    rm -f "${soc_mpv}" "${soc_nvi}"
    exec 3>&-
    disown
    exit 0
}


_main() {

    _ini
    _prg_tbd_ini

    while read -r fil_cur ; do
        
        timeout 0.01 cat < "${fif_x}"
        #timeout 0.01 cat < "${fif_x}" tail -n 1 | >&3
      
        jobs; jobs | grep tabbed || break
        [ ! -e "${fil_cur}" ] && continue
         
        _mim_set
        _tab_swi
        _mim_swi
        
        mim_las="${mim_cur}"

    done < "${fif_x}"

    _kil
}

_main &
